//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.Kentico;

[assembly: RegisterDocumentType(Asset.CLASS_NAME, typeof(Asset))]

namespace CMS.DocumentEngine.Types.Kentico
{
	/// <summary>
	/// Represents a content item of type Asset.
	/// </summary>
	public partial class Asset : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "Kentico.Asset";


		/// <summary>
		/// The instance of the class that provides extended API for working with Asset fields.
		/// </summary>
		private readonly AssetFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// AssetID.
		/// </summary>
		[DatabaseIDField]
		public int AssetID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("AssetID"), 0);
			}
			set
			{
				SetValue("AssetID", value);
			}
		}


		/// <summary>
		/// Description.
		/// </summary>
		[DatabaseField]
		public string Description
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Description"), @"");
			}
			set
			{
				SetValue("Description", value);
			}
		}


		/// <summary>
		/// AltText.
		/// </summary>
		[DatabaseField]
		public string AltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("AltText"), @"");
			}
			set
			{
				SetValue("AltText", value);
			}
		}


		/// <summary>
		/// UseInternalOnly.
		/// </summary>
		[DatabaseField]
		public bool UseInternalOnly
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("UseInternalOnly"), false);
			}
			set
			{
				SetValue("UseInternalOnly", value);
			}
		}


		/// <summary>
		/// File.
		/// </summary>
		[DatabaseField]
		public string File
		{
			get
			{
				return ValidationHelper.GetString(GetValue("File"), "");
			}
			set
			{
				SetValue("File", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Asset fields.
		/// </summary>
		[RegisterProperty]
		public AssetFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Asset fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class AssetFields : AbstractHierarchicalObject<AssetFields>
		{
			/// <summary>
			/// The content item of type Asset that is a target of the extended API.
			/// </summary>
			private readonly Asset mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="AssetFields" /> class with the specified content item of type Asset.
			/// </summary>
			/// <param name="instance">The content item of type Asset that is a target of the extended API.</param>
			public AssetFields(Asset instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// AssetID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.AssetID;
				}
				set
				{
					mInstance.AssetID = value;
				}
			}


			/// <summary>
			/// Description.
			/// </summary>
			public string Description
			{
				get
				{
					return mInstance.Description;
				}
				set
				{
					mInstance.Description = value;
				}
			}


			/// <summary>
			/// AltText.
			/// </summary>
			public string AltText
			{
				get
				{
					return mInstance.AltText;
				}
				set
				{
					mInstance.AltText = value;
				}
			}


			/// <summary>
			/// UseInternalOnly.
			/// </summary>
			public bool UseInternalOnly
			{
				get
				{
					return mInstance.UseInternalOnly;
				}
				set
				{
					mInstance.UseInternalOnly = value;
				}
			}


			/// <summary>
			/// File.
			/// </summary>
			public global::CMS.DocumentEngine.ContentItemAsset File
			{
				get
				{
					return global::CMS.DocumentEngine.Internal.ContentItemAssetJsonConverter.ConvertToModel(mInstance, nameof(mInstance.File));
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Asset" /> class.
		/// </summary>
		public Asset() : base(CLASS_NAME)
		{
			mFields = new AssetFields(this);
		}

		#endregion
	}
}